""""
"""!""."
""""""
"""""."
"""((()))""."
"""(())"""
"""(abc)""."
"""*"""
"""*""."
"""0"","
"""1"""
"""11"""
"""2"""
"""3.14""."
"""6!""."
"""6"""
"""9ix"""
"""<<>>"","
"""<<word>>""."
"""<i>Yay</i>"""
"""<i>Yay</i>""."
"""?"""
"""AxA"""
"""AxAxA"""
"""Bob"","
"""Buzz"","
"""Buzz""."
"""Bye"""
"""CCoCodCode""."
"""Candy"""
"""Code"""
"""Fizz"""
"""Fizz""."
"""FizzBuzz""."
"""He""."
"""Hello"
"""Hello"""
"""HelloHe"""
"""Hi"""
"""HiByeByeHi""."
"""Hlo""."
"""Woo""."
"""WooHoo"""
"""X"""
"""X"","
"""Yay""."
"""a"""
"""a"","
"""aa"","
"""ab""."
"""ab**cd"""
"""ab*cd"""
"""abXYZba"""
"""aba"""
"""abc"""
"""abcat""."
"""abcdef"""
"""ad"""
"""ad""."
"""alone"""
"""and""."
"""answers"""
"""az"""
"""b"""
"""b"","
"""b""}."
"""bOk"""
"""bad"""
"""badxxx"""
"""bca""."
"""bcaefd""."
"""big"""
"""block"""
"""blue"""
"""bob"""
"""bread"""
"""butter""."
"""c"""
"""c"","
"""case"
"""cat"""
"""centered"""
"""cherry""."
"""cleaned"""
"""close"""
"""clump"""
"""code"""
"""codign""."
"""coding"""
"""concatenation"")"
"""cooe"""
"""cope"""
"""count"""
"""decomposition"")."
"""del"""
"""dog"""
"""edited""."
"""ell""."
"""endy"""
"""equalOk"""
"""everywhere"""
"""f"""
"""far"","
"""fez"""
"""fries""."
"""happy"""
"""heavy"""
"""hello"""
"""hello"":0."
"""hi"""
"""hip""."
"""hippo"""
"""hixxxhi"""
"""hour"""
"""i"""
"""ice"
"""is"
"""is"""
"""java"""
"""key"""
"""kien""."
"""kitten"""
"""kittens"""
"""left"
"""linear"""
"""lloHe""."
"""loHi""."
"""ly""."
"""match"""
"""mirror"""
"""mix"","
"""mod"""
"""negative"""
"""not"
"""not"""
"""not"","
"""num"","
"""nuts""."
"""out"""
"""oz""."
"""ozymandias"""
"""pair"""
"""pi"""
"""pix"","
"""potato"""
"""public"
"""red"""
"""ri""."
"""rotated"
"""salad"""
"""span"""
"""special"""
"""spinach"""
"""spinach""."
"""string"""
"""tcatt""."
"""teen"""
"""this"""
"""triple"""
"""unlucky"""
"""word"""
"""x"""
"""x""."
"""x.xyz"""
"""xbadxx"""
"""xip"""
"""xx"""
"""xx"","
"""xx""."
"""xxbaaz"""
"""xxbadxx""."
"""xxcaazz"""
"""xxx"""
"""xxy"""
"""xxyz"""
"""xyx"""
"""xyz"""
"""xyz(abc)123"""
"""y"""
"""ya""."
"""yak"""
"""yellow"""
"""yo"""
"""yogurt"""
"""yy"""
"""yyzzza"""
"""yza""."
"""z""."
"""zap"""
"""zip"""
"""zipXzap"""
"""zpXzp""."
%
%)
'*'
"'0',"
"'1',"
'9'.
'@'
'a'
'b'.
"'d',"
'e'
'g'
'm'
'o'
'p'.
'x'
"'x',"
'x's.
'y'
'z'
"'z',"
"(""+""),"
(%)
(*)
(.).
(/)
(126
(3
(7
(A
(Efficiency
(No
(Note:
(On
(See
(This
(a
(and
(at
(backwards)
(but
(case
(differing
(e.g.
(essentially
(every
(i.e.
(if
(in
(inclusive).
(known
(length
(n-1)
(n-2)
(no
(not
(one
(possibly
(spaces
(star)
(the
(we
(without
*
+
+0
+4
",0,"
--
-1
-1/0/1).
..
...
....
.equals()
/
0
0's.
0).
"0,"
"0,1,"
0-9
0.
0..10
0..23.
0..nums.length
0..str.length()-1
0}.
1
1's
"1),"
1)/2.
1*2
"1,"
1.
"1..10,"
1..100.
1..6.
1..length.
1..str.length().
10
10's
10)
"10,"
10.
10..19
10..20
"10..99,"
100
100.
11
"11,"
11.
12
12).
128
13
"13,"
13..19
15
16
17
19
19.
1st
1}
1}.
2
"2"""
2's
2)
"2,"
2.
"20,"
20.
200.
20}.
21
"21,"
21.
23
"23,"
23.
"24,"
25.
27
271
2nd
"2nd,"
2}
"2},"
3
3's
"3's,"
3's.
"3,"
3.
30..40
38
39
3}
4
4's
"4's,"
4's.
"4,"
"4,5,"
4.
40
40..50
"45,"
"4th,"
4}.
5
5's
"5's,"
5)
"5,"
5.
57.
5}
5}.
6
6's
"6),"
"6,"
6-sided
6.
"60,"
"6th,"
"6},"
6}.
7
7's
7).
"7,"
7.
717
7}.
8
"8,"
"8,9"
8.
8818
9
9's
"9,"
9.
90.
90..100
"99,"
9}.
:
</i>
<=
<i>
=
>=
A
A's
"AP,"
Additionally
Also
"Alternately,"
Any
ArrayList)
Assume
B
"B,"
B.
Basically
"Bob!""."
Boolean>
Both
Call
Character.isDigit(char)
Character.isLetter(char)
Code
Code)
Code.)
Compute
Consider
Count
Decompose
Define
Do
Does
Each
Every
Except
FizzBuzz
For
Given
HTML
Harder
However
"However,"
If
Ignore
In
Integer.parseInt(string)
Integer>
Introduction
"Java,"
JavaBat
List
Look
Loop
"Map<String,"
Math.abs(n)
Math.abs(num)
"Math.max(v1,"
"Math.min(v1,"
Mod
Mod)
Modify
More
N
"N,"
No
Normally
Note
Note:
Nth
On
Once
One
Or
Order
Other
Otherwise
"Otherwise,"
Pair's
Rather
Recursively
Remove
Repeat
Return
Returns
Say
See
So
"So,"
Start
String
String.valueOf(n)
String.valueOf(xxx)
String>
String[]
String[desired_length]
Strings
Suggestion:
Suppose
The
This
To
Unless
Use
User
Using
We
We'll
What
When
Write
Yay
You
a
"a,"
a.
aSmile
ab
"ab,"
"abba,"
absolute
ac
ac.
accept
actually
add
added
additional
adjacent
advantage
after
algorithm:
all
allocate
"allowed,"
alone
along
alphabetic
alphabetical
already
also
also.
also:
altitude
always
an
and
another
another?
"answer,"
answer.
answers
"answers,"
any
anything
"anything,"
anything.
anywhere
anywhere.
appear
appearance
appearances
appearing
appears
append
appended
approach
are
area.
arguments
around
array
"array,"
array.
arrays
"arrays,"
arrays.
as
assume
at
available
average
average(int[]
average.
averages
avoid
b
b)
"b,"
b.
bSmile
"back,"
back.
backtracking
balance
"balanced,"
base
bc
"bc,"
be
because
becomes
been
before
before.
begining
beginning
"beginning,"
begins
below
best
between
between.
big
bigger
bit
blank
blank.
block
"block,"
blocks
"blocks,"
blocks.
blue
boolean)
both
"both),"
both.
bound
bread
bread.
build
built
built-in
"bully,"
but
by
c
"c,"
call
caller
calls
can
case
"case,"
case.
case;
cases
cases).
"cases,"
cause
caused
change
changed
changes
char
"char,"
char.
character
characters
characters.
chars
"chars,"
chars.
check
choices.
choose
chosen
"chosen,"
chosen.
cigars
cigars.
classic
clumps
code
color
come
comes
compare
complicated
computation
compute
computes
concatenated
concatenation
"concatenation,"
conditions
consider
considering
constraint
constraint:
constraints:
contain
containing
"containing,"
contains
"contains,"
"contents,"
contiguous
continuing
convention
convert
converted
converts
copies
copy
"copy,"
copying
correct
corresponding
count
"count,"
count.
counting
counts
"cream"""
create
creates
current
data
"decomposition,"
"default,"
define
definition.
deleted.
dice
die
differ
difference
differences
different
differing
differs
difficult
digit
"digit,"
digit.
digit.)
digits
digits.
directly
directly.
disabled.
discard
divide
divided
divides
dividing
divisible
division
"division,"
do
does
doing
double
"double,"
"double-char,"
double.
"doubles,"
down
down.
draws
duplicates.
e.g.
each
each.
earlier
either
element
"element,"
element.
elements
elements.
else
empty
encountering
end
end)
"end,"
end.
end=10
end=4
end=5
ending
ends
endy
endy.
entirely
equal
equal.
equality
etc.
even
evenly
"evenly,"
evenly.
event
every
everywhere
exact
exact.
exactly
exactly.
"exam,"
example
"example,"
except
exception
exchanged.
execute
exist
"exist,"
exists
expected
extending
extent
extra
extract
fact
factorial
false
"false,"
false.
famous
fewer
fibonacci
fibonacci(n)
figure
final
find
finds
first
"first,"
"fit,"
fix34
fixTeen(int
fixed
followed
following
follows:
food
for
for-loop
"forbidden,"
form
found
from
front
"front,"
front.
front;
function
g's
get
given
gives
giving
go
goal
going
"gone,"
gone.
great
greater
green
greeting
group
"group,"
group.
grouped
grouping).
groups
groups).
"groups,"
half
"half,"
half.
happens
happy.
harder
has
have
height
heights
"heights,"
helper
here
hour
how
however
i
id
id.
identical
if
if-statement
ignore
ignoring
image
immedately
immediately
implement
in
in.
include
included
including
inclusive
inclusive).
"inclusive,"
inclusive.
incorrect
increases
increasing
increment
indent
index
index).
index+1
"index,"
index.
indexes
indicate
initial
inner
"inner,"
inside
inside.
instance
instances
"instances,"
instead
int
int.)
int[desired_length]
integer
integers
"integers,"
interviews.
into
ints
"ints,"
is
"is,"
is:
isEndy(int
it
"it,"
it.
italic
its
itself
"itself,"
itself.
j)
j.
java
job
just
keep
key
keys
keys.
known
large.
larger
"larger,"
larger.
largest
largest.
last
"last,"
later
"later,"
least
leave
leaves
leaving
left
"left"""
leftmost
leftover
length
"length,"
length-0
"length-3,"
length.
length/2.
"lengths,"
less
"less,"
letter
letter.)
level
like
"like,"
likewise
limited
list
little
logic
long
longer
longest
look
looking
looks.
loop
loops
loops)
loops).
lottery
loud
lower
lowercase
lucky.
made
main
make
makes
making
many
map
"map,"
map.
match
"match,"
matches
"mathematics,"
matter.
may
mean
medium
method
method).
methods
middle
"middle,"
minus
mirror
missing
mod
modified
modify
"monkeys,"
more
"more,"
more.
most
move
move.
moved
moving
much
multiple
multiples
multiplication)
multiplied
must
n
n%10
n)
n*(n
n*n
"n,"
n-1
n-1.
n.
"n/10,"
n=0
n=1
"n=2,"
n=3
n=3.
"n>=0,"
name
"name,"
names
"names,"
naturally
nearest
need
needed
"needed,"
needed.)
negative
negative.
negative/0/positive
neither
nesting
new
next
no
noDoubles
noTeenSum().
non-empty
non-empty.
non-negative
non-negative.
non-overlapping
non-zero
none
not
"not""."
"not,"
not.
now
nth
num
num)
number
"number,"
number.
numbers
"numbers,"
numbers.
nums1
"nums1,"
nums2
n}
"objects,"
occurrences
odd
odd.
of
omit
omitted.
omitting
on
on.
once
one
one.
only
operator
or
order
"order,"
order.
ordered
original
"original,"
other
"other,"
other.
others.
otherwise
otherwise.
our
out
outer
outer.
outside
outsideMode
over
over.
overlap
"overlap,"
overlap.
overlapping
overlapping).
overlapping.
pair
pair.
pairs
"pairs,"
parameter
parameters
parenthesis
"parenthesis,"
parrot
parrot.
part
part).
particular
party
"party,"
pass
passing
pattern
"pattern,"
pattern:
patterns
period
"pi,"
pieces
place
plus
pluses
position
positions
positive
positive.
possible
possibly
"power,"
"powerN(3,"
practice
preceeded
prefix
"present),"
"present,"
present.
preserved
previous
"printing,"
priority.)
problem
"problem,"
problem.
problem.)
problems
process
produce
product
progress
putting
question
range
range.
rearranged
recur
recursion
recursive
recursively
red
reduced
remainder
"remainder,"
"remainders,"
remaining
remove
"remove,"
removed
"removed,"
removed.
removes
removing
repeating
"repetition,"
repetitions
replaced
replacing
representing
rest
result
result.
resulting
results
return
returning
returns
reverse
righmost
right
right.
rightmost
"rolls,"
round
round10(int
roundSum().
rounded
rounds
row
row.
rows.
rule.
run
running
same
"same,"
same.
same.)
"sameEnds(""abXab"")"
sandwich
say
score
scores
"scores,"
scores.
scoresAverage()
scoresAverage().
scoresSpecial()
search
second
section
sections
see
"seen,"
"sensitive"")."
sensitive).
"sep,"
separate
separated
separator
sequence
sequence.
series
set
shift
"shifted"""
"short+long+short,"
shorter
should
show
showing
shown
side
side.
simply
since
single
size
sleep
slightly
small
"small,"
smaller
smallest
smiling
smiling.
so
solution
solved
some
something
sometimes
somewhere
"somewhere,"
somewhere.
sorted
sorting.
space
"spaced,"
spaces
span
special
special.
specify
split
splitArray().
splitOdd10().
squared
squared).
squirrel
squirrels
star
"star,"
start
"start,"
start.
start..end.
start/end
start=1
"start=2,"
start=5
starting
starts
step
steps
store
"str,"
str.contains(x)
str.length()
str.length()).
"str.substring(i,"
str.toLowerCase()
str.toUpperCase()
str1
str1.compareTo(str2)
str2
strategy
strict
string
string's
"string,"
string.
string.)
string?
strings
"strings,"
strings.
student's
sub
"sub,"
subsequent
substring
substring).
substring.
substrings
successful
"successful,"
such
sum
"sum,"
sum.
sumHeights
sums
"sums,"
surround
swap
"swap,"
"swapped,"
swaps
syntax
tag
tags
take
takes
taking
talking
target
"target,"
target?
teen
"teen,"
teen.
teens.
"temperatures,"
test
tests
text
text.
than
that
"that,"
the
their
them
them.
then
there
there.
these
they
third.
this
this:
those
three
through
ticket
"ticket,"
"tie,"
tie.
time
time.
times
"times,"
times.
to
toLowerCase()
together
together.
too
topmost
topping
total
towards
trail.
triangle
triple
triples
triples.
trouble
trouble.
true
"true,"
truly
twice
"twice,"
twice.
two
type.
types.
unchanged.
under
understand
unless
unlucky
"unlucky,"
unlucky.
until
up
upper
upper/lower
uppercase
use
used
users
"users,"
uses
usual
v2)
vacation
vacation.
valid
valid.
value
"value,"
value.
values
values).
"values,"
values.
variation
vary
version
"version,"
very
walk
walking
was
way
"way,"
we
we'll
we're
web
weekday
"weekday,"
"weekend,"
what's
whatever
when
where
which
whichever
while
whole
will
with
within
without
won't
word
"word,"
word-count
words
"words,"
words.
wordsWithout()
works.
would
wrapping
write
x.
xy-balanced
xy-balanced.
xyz
y
yield
yields
"yields""kikittenki""."
you
your
z
zero
"zero,"
zero.
zeros
{
"{"""
"{""a"","
"{""that"
{0
"{0,"
"{1,"
"{2,"
"{3,"
"{5,"
"{6,"
"{7,"
<BOS>
<EOS>
""""
"""!""."
""""""
"""""."
"""((()))""."
"""(())"""
"""(abc)""."
"""*"""
"""*""."
"""0"","
"""1"""
"""11"""
"""2"""
"""3.14""."
"""6!""."
"""6"""
"""9ix"""
"""<<>>"","
"""<<word>>""."
"""<i>Yay</i>"""
"""<i>Yay</i>""."
"""?"""
"""AxA"""
"""AxAxA"""
"""Bob"","
"""Buzz"","
"""Buzz""."
"""Bye"""
"""CCoCodCode""."
"""Candy"""
"""Code"""
"""Fizz"""
"""Fizz""."
"""FizzBuzz""."
"""He""."
"""Hello"
"""Hello"""
"""HelloHe"""
"""Hi"""
"""HiByeByeHi""."
"""Hlo""."
"""Woo""."
"""WooHoo"""
"""X"""
"""X"","
"""Yay""."
"""a"""
"""a"","
"""aa"","
"""ab""."
"""ab**cd"""
"""ab*cd"""
"""abXYZba"""
"""aba"""
"""abc"""
"""abcat""."
"""abcdef"""
"""ad"""
"""ad""."
"""alone"""
"""and""."
"""answers"""
"""az"""
"""b"""
"""b"","
"""b""}."
"""bOk"""
"""bad"""
"""badxxx"""
"""bca""."
"""bcaefd""."
"""big"""
"""block"""
"""blue"""
"""bob"""
"""bread"""
"""butter""."
"""c"""
"""c"","
"""case"
"""cat"""
"""centered"""
"""cherry""."
"""cleaned"""
"""close"""
"""clump"""
"""code"""
"""codign""."
"""coding"""
"""concatenation"")"
"""cooe"""
"""cope"""
"""count"""
"""decomposition"")."
"""del"""
"""dog"""
"""edited""."
"""ell""."
"""endy"""
"""equalOk"""
"""everywhere"""
"""f"""
"""far"","
"""fez"""
"""fries""."
"""happy"""
"""heavy"""
"""hello"""
"""hello"":0."
"""hi"""
"""hip""."
"""hippo"""
"""hixxxhi"""
"""hour"""
"""i"""
"""ice"
"""is"
"""is"""
"""java"""
"""key"""
"""kien""."
"""kitten"""
"""kittens"""
"""left"
"""linear"""
"""lloHe""."
"""loHi""."
"""ly""."
"""match"""
"""mirror"""
"""mix"","
"""mod"""
"""negative"""
"""not"
"""not"""
"""not"","
"""num"","
"""nuts""."
"""out"""
"""oz""."
"""ozymandias"""
"""pair"""
"""pi"""
"""pix"","
"""potato"""
"""public"
"""red"""
"""ri""."
"""rotated"
"""salad"""
"""span"""
"""special"""
"""spinach"""
"""spinach""."
"""string"""
"""tcatt""."
"""teen"""
"""this"""
"""triple"""
"""unlucky"""
"""word"""
"""x"""
"""x""."
"""x.xyz"""
"""xbadxx"""
"""xip"""
"""xx"""
"""xx"","
"""xx""."
"""xxbaaz"""
"""xxbadxx""."
"""xxcaazz"""
"""xxx"""
"""xxy"""
"""xxyz"""
"""xyx"""
"""xyz"""
"""xyz(abc)123"""
"""y"""
"""ya""."
"""yak"""
"""yellow"""
"""yo"""
"""yogurt"""
"""yy"""
"""yyzzza"""
"""yza""."
"""z""."
"""zap"""
"""zip"""
"""zipXzap"""
"""zpXzp""."
%
%)
'*'
"'0',"
"'1',"
'9'.
'@'
'a'
'b'.
"'d',"
'e'
'g'
'm'
'o'
'p'.
'x'
"'x',"
'x's.
'y'
'z'
"'z',"
"(""+""),"
(%)
(*)
(.).
(/)
(126
(3
(7
(A
(Efficiency
(No
(Note:
(On
(See
(This
(a
(and
(at
(backwards)
(but
(case
(differing
(e.g.
(essentially
(every
(i.e.
(if
(in
(inclusive).
(known
(length
(n-1)
(n-2)
(no
(not
(one
(possibly
(spaces
(star)
(the
(we
(without
*
+
+0
+4
",0,"
--
-1
-1/0/1).
..
...
....
.equals()
/
0
0's.
0).
"0,"
"0,1,"
0-9
0.
0..10
0..23.
0..nums.length
0..str.length()-1
0}.
1
1's
"1),"
1)/2.
1*2
"1,"
1.
"1..10,"
1..100.
1..6.
1..length.
1..str.length().
10
10's
10)
"10,"
10.
10..19
10..20
"10..99,"
100
100.
11
"11,"
11.
12
12).
128
13
"13,"
13..19
15
16
17
19
19.
1st
1}
1}.
2
"2"""
2's
2)
"2,"
2.
"20,"
20.
200.
20}.
21
"21,"
21.
23
"23,"
23.
"24,"
25.
27
271
2nd
"2nd,"
2}
"2},"
3
3's
"3's,"
3's.
"3,"
3.
30..40
38
39
3}
4
4's
"4's,"
4's.
"4,"
"4,5,"
4.
40
40..50
"45,"
"4th,"
4}.
5
5's
"5's,"
5)
"5,"
5.
57.
5}
5}.
6
6's
"6),"
"6,"
6-sided
6.
"60,"
"6th,"
"6},"
6}.
7
7's
7).
"7,"
7.
717
7}.
8
"8,"
"8,9"
8.
8818
9
9's
"9,"
9.
90.
90..100
"99,"
9}.
:
</i>
<=
<i>
=
>=
A
A's
"AP,"
Additionally
Also
"Alternately,"
Any
ArrayList)
Assume
B
"B,"
B.
Basically
"Bob!""."
Boolean>
Both
Call
Character.isDigit(char)
Character.isLetter(char)
Code
Code)
Code.)
Compute
Consider
Count
Decompose
Define
Do
Does
Each
Every
Except
FizzBuzz
For
Given
HTML
Harder
However
"However,"
If
Ignore
In
Integer.parseInt(string)
Integer>
Introduction
"Java,"
JavaBat
List
Look
Loop
"Map<String,"
Math.abs(n)
Math.abs(num)
"Math.max(v1,"
"Math.min(v1,"
Mod
Mod)
Modify
More
N
"N,"
No
Normally
Note
Note:
Nth
On
Once
One
Or
Order
Other
Otherwise
"Otherwise,"
Pair's
Rather
Recursively
Remove
Repeat
Return
Returns
Say
See
So
"So,"
Start
String
String.valueOf(n)
String.valueOf(xxx)
String>
String[]
String[desired_length]
Strings
Suggestion:
Suppose
The
This
To
Unless
Use
User
Using
We
We'll
What
When
Write
Yay
You
a
"a,"
a.
aSmile
ab
"ab,"
"abba,"
absolute
ac
ac.
accept
actually
add
added
additional
adjacent
advantage
after
algorithm:
all
allocate
"allowed,"
alone
along
alphabetic
alphabetical
already
also
also.
also:
altitude
always
an
and
another
another?
"answer,"
answer.
answers
"answers,"
any
anything
"anything,"
anything.
anywhere
anywhere.
appear
appearance
appearances
appearing
appears
append
appended
approach
are
area.
arguments
around
array
"array,"
array.
arrays
"arrays,"
arrays.
as
assume
at
available
average
average(int[]
average.
averages
avoid
b
b)
"b,"
b.
bSmile
"back,"
back.
backtracking
balance
"balanced,"
base
bc
"bc,"
be
because
becomes
been
before
before.
begining
beginning
"beginning,"
begins
below
best
between
between.
big
bigger
bit
blank
blank.
block
"block,"
blocks
"blocks,"
blocks.
blue
boolean)
both
"both),"
both.
bound
bread
bread.
build
built
built-in
"bully,"
but
by
c
"c,"
call
caller
calls
can
case
"case,"
case.
case;
cases
cases).
"cases,"
cause
caused
change
changed
changes
char
"char,"
char.
character
characters
characters.
chars
"chars,"
chars.
check
choices.
choose
chosen
"chosen,"
chosen.
cigars
cigars.
classic
clumps
code
color
come
comes
compare
complicated
computation
compute
computes
concatenated
concatenation
"concatenation,"
conditions
consider
considering
constraint
constraint:
constraints:
contain
containing
"containing,"
contains
"contains,"
"contents,"
contiguous
continuing
convention
convert
converted
converts
copies
copy
"copy,"
copying
correct
corresponding
count
"count,"
count.
counting
counts
"cream"""
create
creates
current
data
"decomposition,"
"default,"
define
definition.
deleted.
dice
die
differ
difference
differences
different
differing
differs
difficult
digit
"digit,"
digit.
digit.)
digits
digits.
directly
directly.
disabled.
discard
divide
divided
divides
dividing
divisible
division
"division,"
do
does
doing
double
"double,"
"double-char,"
double.
"doubles,"
down
down.
draws
duplicates.
e.g.
each
each.
earlier
either
element
"element,"
element.
elements
elements.
else
empty
encountering
end
end)
"end,"
end.
end=10
end=4
end=5
ending
ends
endy
endy.
entirely
equal
equal.
equality
etc.
even
evenly
"evenly,"
evenly.
event
every
everywhere
exact
exact.
exactly
exactly.
"exam,"
example
"example,"
except
exception
exchanged.
execute
exist
"exist,"
exists
expected
extending
extent
extra
extract
fact
factorial
false
"false,"
false.
famous
fewer
fibonacci
fibonacci(n)
figure
final
find
finds
first
"first,"
"fit,"
fix34
fixTeen(int
fixed
followed
following
follows:
food
for
for-loop
"forbidden,"
form
found
from
front
"front,"
front.
front;
function
g's
get
given
gives
giving
go
goal
going
"gone,"
gone.
great
greater
green
greeting
group
"group,"
group.
grouped
grouping).
groups
groups).
"groups,"
half
"half,"
half.
happens
happy.
harder
has
have
height
heights
"heights,"
helper
here
hour
how
however
i
id
id.
identical
if
if-statement
ignore
ignoring
image
immedately
immediately
implement
in
in.
include
included
including
inclusive
inclusive).
"inclusive,"
inclusive.
incorrect
increases
increasing
increment
indent
index
index).
index+1
"index,"
index.
indexes
indicate
initial
inner
"inner,"
inside
inside.
instance
instances
"instances,"
instead
int
int.)
int[desired_length]
integer
integers
"integers,"
interviews.
into
ints
"ints,"
is
"is,"
is:
isEndy(int
it
"it,"
it.
italic
its
itself
"itself,"
itself.
j)
j.
java
job
just
keep
key
keys
keys.
known
large.
larger
"larger,"
larger.
largest
largest.
last
"last,"
later
"later,"
least
leave
leaves
leaving
left
"left"""
leftmost
leftover
length
"length,"
length-0
"length-3,"
length.
length/2.
"lengths,"
less
"less,"
letter
letter.)
level
like
"like,"
likewise
limited
list
little
logic
long
longer
longest
look
looking
looks.
loop
loops
loops)
loops).
lottery
loud
lower
lowercase
lucky.
made
main
make
makes
making
many
map
"map,"
map.
match
"match,"
matches
"mathematics,"
matter.
may
mean
medium
method
method).
methods
middle
"middle,"
minus
mirror
missing
mod
modified
modify
"monkeys,"
more
"more,"
more.
most
move
move.
moved
moving
much
multiple
multiples
multiplication)
multiplied
must
n
n%10
n)
n*(n
n*n
"n,"
n-1
n-1.
n.
"n/10,"
n=0
n=1
"n=2,"
n=3
n=3.
"n>=0,"
name
"name,"
names
"names,"
naturally
nearest
need
needed
"needed,"
needed.)
negative
negative.
negative/0/positive
neither
nesting
new
next
no
noDoubles
noTeenSum().
non-empty
non-empty.
non-negative
non-negative.
non-overlapping
non-zero
none
not
"not""."
"not,"
not.
now
nth
num
num)
number
"number,"
number.
numbers
"numbers,"
numbers.
nums1
"nums1,"
nums2
n}
"objects,"
occurrences
odd
odd.
of
omit
omitted.
omitting
on
on.
once
one
one.
only
operator
or
order
"order,"
order.
ordered
original
"original,"
other
"other,"
other.
others.
otherwise
otherwise.
our
out
outer
outer.
outside
outsideMode
over
over.
overlap
"overlap,"
overlap.
overlapping
overlapping).
overlapping.
pair
pair.
pairs
"pairs,"
parameter
parameters
parenthesis
"parenthesis,"
parrot
parrot.
part
part).
particular
party
"party,"
pass
passing
pattern
"pattern,"
pattern:
patterns
period
"pi,"
pieces
place
plus
pluses
position
positions
positive
positive.
possible
possibly
"power,"
"powerN(3,"
practice
preceeded
prefix
"present),"
"present,"
present.
preserved
previous
"printing,"
priority.)
problem
"problem,"
problem.
problem.)
problems
process
produce
product
progress
putting
question
range
range.
rearranged
recur
recursion
recursive
recursively
red
reduced
remainder
"remainder,"
"remainders,"
remaining
remove
"remove,"
removed
"removed,"
removed.
removes
removing
repeating
"repetition,"
repetitions
replaced
replacing
representing
rest
result
result.
resulting
results
return
returning
returns
reverse
righmost
right
right.
rightmost
"rolls,"
round
round10(int
roundSum().
rounded
rounds
row
row.
rows.
rule.
run
running
same
"same,"
same.
same.)
"sameEnds(""abXab"")"
sandwich
say
score
scores
"scores,"
scores.
scoresAverage()
scoresAverage().
scoresSpecial()
search
second
section
sections
see
"seen,"
"sensitive"")."
sensitive).
"sep,"
separate
separated
separator
sequence
sequence.
series
set
shift
"shifted"""
"short+long+short,"
shorter
should
show
showing
shown
side
side.
simply
since
single
size
sleep
slightly
small
"small,"
smaller
smallest
smiling
smiling.
so
solution
solved
some
something
sometimes
somewhere
"somewhere,"
somewhere.
sorted
sorting.
space
"spaced,"
spaces
span
special
special.
specify
split
splitArray().
splitOdd10().
squared
squared).
squirrel
squirrels
star
"star,"
start
"start,"
start.
start..end.
start/end
start=1
"start=2,"
start=5
starting
starts
step
steps
store
"str,"
str.contains(x)
str.length()
str.length()).
"str.substring(i,"
str.toLowerCase()
str.toUpperCase()
str1
str1.compareTo(str2)
str2
strategy
strict
string
string's
"string,"
string.
string.)
string?
strings
"strings,"
strings.
student's
sub
"sub,"
subsequent
substring
substring).
substring.
substrings
successful
"successful,"
such
sum
"sum,"
sum.
sumHeights
sums
"sums,"
surround
swap
"swap,"
"swapped,"
swaps
syntax
tag
tags
take
takes
taking
talking
target
"target,"
target?
teen
"teen,"
teen.
teens.
"temperatures,"
test
tests
text
text.
than
that
"that,"
the
their
them
them.
then
there
there.
these
they
third.
this
this:
those
three
through
ticket
"ticket,"
"tie,"
tie.
time
time.
times
"times,"
times.
to
toLowerCase()
together
together.
too
topmost
topping
total
towards
trail.
triangle
triple
triples
triples.
trouble
trouble.
true
"true,"
truly
twice
"twice,"
twice.
two
type.
types.
unchanged.
under
understand
unless
unlucky
"unlucky,"
unlucky.
until
up
upper
upper/lower
uppercase
use
used
users
"users,"
uses
usual
v2)
vacation
vacation.
valid
valid.
value
"value,"
value.
values
values).
"values,"
values.
variation
vary
version
"version,"
very
walk
walking
was
way
"way,"
we
we'll
we're
web
weekday
"weekday,"
"weekend,"
what's
whatever
when
where
which
whichever
while
whole
will
with
within
without
won't
word
"word,"
word-count
words
"words,"
words.
wordsWithout()
works.
would
wrapping
write
x.
xy-balanced
xy-balanced.
xyz
y
yield
yields
"yields""kikittenki""."
you
your
z
zero
"zero,"
zero.
zeros
{
"{"""
"{""a"","
"{""that"
{0
"{0,"
"{1,"
"{2,"
"{3,"
"{5,"
"{6,"
"{7,"
<BOS>
<EOS>
""""
"""!""."
""""""
"""""."
"""((()))""."
"""(())"""
"""(abc)""."
"""*"""
"""*""."
"""0"","
"""1"""
"""11"""
"""2"""
"""3.14""."
"""6!""."
"""6"""
"""9ix"""
"""<<>>"","
"""<<word>>""."
"""<i>Yay</i>"""
"""<i>Yay</i>""."
"""?"""
"""AxA"""
"""AxAxA"""
"""Bob"","
"""Buzz"","
"""Buzz""."
"""Bye"""
"""CCoCodCode""."
"""Candy"""
"""Code"""
"""Fizz"""
"""Fizz""."
"""FizzBuzz""."
"""He""."
"""Hello"
"""Hello"""
"""HelloHe"""
"""Hi"""
"""HiByeByeHi""."
"""Hlo""."
"""Woo""."
"""WooHoo"""
"""X"""
"""X"","
"""Yay""."
"""a"""
"""a"","
"""aa"","
"""ab""."
"""ab**cd"""
"""ab*cd"""
"""abXYZba"""
"""aba"""
"""abc"""
"""abcat""."
"""abcdef"""
"""ad"""
"""ad""."
"""alone"""
"""and""."
"""answers"""
"""az"""
"""b"""
"""b"","
"""b""}."
"""bOk"""
"""bad"""
"""badxxx"""
"""bca""."
"""bcaefd""."
"""big"""
"""block"""
"""blue"""
"""bob"""
"""bread"""
"""butter""."
"""c"""
"""c"","
"""case"
"""cat"""
"""centered"""
"""cherry""."
"""cleaned"""
"""close"""
"""clump"""
"""code"""
"""codign""."
"""coding"""
"""concatenation"")"
"""cooe"""
"""cope"""
"""count"""
"""decomposition"")."
"""del"""
"""dog"""
"""edited""."
"""ell""."
"""endy"""
"""equalOk"""
"""everywhere"""
"""f"""
"""far"","
"""fez"""
"""fries""."
"""happy"""
"""heavy"""
"""hello"""
"""hello"":0."
"""hi"""
"""hip""."
"""hippo"""
"""hixxxhi"""
"""hour"""
"""i"""
"""ice"
"""is"
"""is"""
"""java"""
"""key"""
"""kien""."
"""kitten"""
"""kittens"""
"""left"
"""linear"""
"""lloHe""."
"""loHi""."
"""ly""."
"""match"""
"""mirror"""
"""mix"","
"""mod"""
"""negative"""
"""not"
"""not"""
"""not"","
"""num"","
"""nuts""."
"""out"""
"""oz""."
"""ozymandias"""
"""pair"""
"""pi"""
"""pix"","
"""potato"""
"""public"
"""red"""
"""ri""."
"""rotated"
"""salad"""
"""span"""
"""special"""
"""spinach"""
"""spinach""."
"""string"""
"""tcatt""."
"""teen"""
"""this"""
"""triple"""
"""unlucky"""
"""word"""
"""x"""
"""x""."
"""x.xyz"""
"""xbadxx"""
"""xip"""
"""xx"""
"""xx"","
"""xx""."
"""xxbaaz"""
"""xxbadxx""."
"""xxcaazz"""
"""xxx"""
"""xxy"""
"""xxyz"""
"""xyx"""
"""xyz"""
"""xyz(abc)123"""
"""y"""
"""ya""."
"""yak"""
"""yellow"""
"""yo"""
"""yogurt"""
"""yy"""
"""yyzzza"""
"""yza""."
"""z""."
"""zap"""
"""zip"""
"""zipXzap"""
"""zpXzp""."
%
%)
'*'
"'0',"
"'1',"
'9'.
'@'
'a'
'b'.
"'d',"
'e'
'g'
'm'
'o'
'p'.
'x'
"'x',"
'x's.
'y'
'z'
"'z',"
"(""+""),"
(%)
(*)
(.).
(/)
(126
(3
(7
(A
(Efficiency
(No
(Note:
(On
(See
(This
(a
(and
(at
(backwards)
(but
(case
(differing
(e.g.
(essentially
(every
(i.e.
(if
(in
(inclusive).
(known
(length
(n-1)
(n-2)
(no
(not
(one
(possibly
(spaces
(star)
(the
(we
(without
*
+
+0
+4
",0,"
--
-1
-1/0/1).
..
...
....
.equals()
/
0
0's.
0).
"0,"
"0,1,"
0-9
0.
0..10
0..23.
0..nums.length
0..str.length()-1
0}.
1
1's
"1),"
1)/2.
1*2
"1,"
1.
"1..10,"
1..100.
1..6.
1..length.
1..str.length().
10
10's
10)
"10,"
10.
10..19
10..20
"10..99,"
100
100.
11
"11,"
11.
12
12).
128
13
"13,"
13..19
15
16
17
19
19.
1st
1}
1}.
2
"2"""
2's
2)
"2,"
2.
"20,"
20.
200.
20}.
21
"21,"
21.
23
"23,"
23.
"24,"
25.
27
271
2nd
"2nd,"
2}
"2},"
3
3's
"3's,"
3's.
"3,"
3.
30..40
38
39
3}
4
4's
"4's,"
4's.
"4,"
"4,5,"
4.
40
40..50
"45,"
"4th,"
4}.
5
5's
"5's,"
5)
"5,"
5.
57.
5}
5}.
6
6's
"6),"
"6,"
6-sided
6.
"60,"
"6th,"
"6},"
6}.
7
7's
7).
"7,"
7.
717
7}.
8
"8,"
"8,9"
8.
8818
9
9's
"9,"
9.
90.
90..100
"99,"
9}.
:
</i>
<=
<i>
=
>=
A
A's
"AP,"
Additionally
Also
"Alternately,"
Any
ArrayList)
Assume
B
"B,"
B.
Basically
"Bob!""."
Boolean>
Both
Call
Character.isDigit(char)
Character.isLetter(char)
Code
Code)
Code.)
Compute
Consider
Count
Decompose
Define
Do
Does
Each
Every
Except
FizzBuzz
For
Given
HTML
Harder
However
"However,"
If
Ignore
In
Integer.parseInt(string)
Integer>
Introduction
"Java,"
JavaBat
List
Look
Loop
"Map<String,"
Math.abs(n)
Math.abs(num)
"Math.max(v1,"
"Math.min(v1,"
Mod
Mod)
Modify
More
N
"N,"
No
Normally
Note
Note:
Nth
On
Once
One
Or
Order
Other
Otherwise
"Otherwise,"
Pair's
Rather
Recursively
Remove
Repeat
Return
Returns
Say
See
So
"So,"
Start
String
String.valueOf(n)
String.valueOf(xxx)
String>
String[]
String[desired_length]
Strings
Suggestion:
Suppose
The
This
To
Unless
Use
User
Using
We
We'll
What
When
Write
Yay
You
a
"a,"
a.
aSmile
ab
"ab,"
"abba,"
absolute
ac
ac.
accept
actually
add
added
additional
adjacent
advantage
after
algorithm:
all
allocate
"allowed,"
alone
along
alphabetic
alphabetical
already
also
also.
also:
altitude
always
an
and
another
another?
"answer,"
answer.
answers
"answers,"
any
anything
"anything,"
anything.
anywhere
anywhere.
appear
appearance
appearances
appearing
appears
append
appended
approach
are
area.
arguments
around
array
"array,"
array.
arrays
"arrays,"
arrays.
as
assume
at
available
average
average(int[]
average.
averages
avoid
b
b)
"b,"
b.
bSmile
"back,"
back.
backtracking
balance
"balanced,"
base
bc
"bc,"
be
because
becomes
been
before
before.
begining
beginning
"beginning,"
begins
below
best
between
between.
big
bigger
bit
blank
blank.
block
"block,"
blocks
"blocks,"
blocks.
blue
boolean)
both
"both),"
both.
bound
bread
bread.
build
built
built-in
"bully,"
but
by
c
"c,"
call
caller
calls
can
case
"case,"
case.
case;
cases
cases).
"cases,"
cause
caused
change
changed
changes
char
"char,"
char.
character
characters
characters.
chars
"chars,"
chars.
check
choices.
choose
chosen
"chosen,"
chosen.
cigars
cigars.
classic
clumps
code
color
come
comes
compare
complicated
computation
compute
computes
concatenated
concatenation
"concatenation,"
conditions
consider
considering
constraint
constraint:
constraints:
contain
containing
"containing,"
contains
"contains,"
"contents,"
contiguous
continuing
convention
convert
converted
converts
copies
copy
"copy,"
copying
correct
corresponding
count
"count,"
count.
counting
counts
"cream"""
create
creates
current
data
"decomposition,"
"default,"
define
definition.
deleted.
dice
die
differ
difference
differences
different
differing
differs
difficult
digit
"digit,"
digit.
digit.)
digits
digits.
directly
directly.
disabled.
discard
divide
divided
divides
dividing
divisible
division
"division,"
do
does
doing
double
"double,"
"double-char,"
double.
"doubles,"
down
down.
draws
duplicates.
e.g.
each
each.
earlier
either
element
"element,"
element.
elements
elements.
else
empty
encountering
end
end)
"end,"
end.
end=10
end=4
end=5
ending
ends
endy
endy.
entirely
equal
equal.
equality
etc.
even
evenly
"evenly,"
evenly.
event
every
everywhere
exact
exact.
exactly
exactly.
"exam,"
example
"example,"
except
exception
exchanged.
execute
exist
"exist,"
exists
expected
extending
extent
extra
extract
fact
factorial
false
"false,"
false.
famous
fewer
fibonacci
fibonacci(n)
figure
final
find
finds
first
"first,"
"fit,"
fix34
fixTeen(int
fixed
followed
following
follows:
food
for
for-loop
"forbidden,"
form
found
from
front
"front,"
front.
front;
function
g's
get
given
gives
giving
go
goal
going
"gone,"
gone.
great
greater
green
greeting
group
"group,"
group.
grouped
grouping).
groups
groups).
"groups,"
half
"half,"
half.
happens
happy.
harder
has
have
height
heights
"heights,"
helper
here
hour
how
however
i
id
id.
identical
if
if-statement
ignore
ignoring
image
immedately
immediately
implement
in
in.
include
included
including
inclusive
inclusive).
"inclusive,"
inclusive.
incorrect
increases
increasing
increment
indent
index
index).
index+1
"index,"
index.
indexes
indicate
initial
inner
"inner,"
inside
inside.
instance
instances
"instances,"
instead
int
int.)
int[desired_length]
integer
integers
"integers,"
interviews.
into
ints
"ints,"
is
"is,"
is:
isEndy(int
it
"it,"
it.
italic
its
itself
"itself,"
itself.
j)
j.
java
job
just
keep
key
keys
keys.
known
large.
larger
"larger,"
larger.
largest
largest.
last
"last,"
later
"later,"
least
leave
leaves
leaving
left
"left"""
leftmost
leftover
length
"length,"
length-0
"length-3,"
length.
length/2.
"lengths,"
less
"less,"
letter
letter.)
level
like
"like,"
likewise
limited
list
little
logic
long
longer
longest
look
looking
looks.
loop
loops
loops)
loops).
lottery
loud
lower
lowercase
lucky.
made
main
make
makes
making
many
map
"map,"
map.
match
"match,"
matches
"mathematics,"
matter.
may
mean
medium
method
method).
methods
middle
"middle,"
minus
mirror
missing
mod
modified
modify
"monkeys,"
more
"more,"
more.
most
move
move.
moved
moving
much
multiple
multiples
multiplication)
multiplied
must
n
n%10
n)
n*(n
n*n
"n,"
n-1
n-1.
n.
"n/10,"
n=0
n=1
"n=2,"
n=3
n=3.
"n>=0,"
name
"name,"
names
"names,"
naturally
nearest
need
needed
"needed,"
needed.)
negative
negative.
negative/0/positive
neither
nesting
new
next
no
noDoubles
noTeenSum().
non-empty
non-empty.
non-negative
non-negative.
non-overlapping
non-zero
none
not
"not""."
"not,"
not.
now
nth
num
num)
number
"number,"
number.
numbers
"numbers,"
numbers.
nums1
"nums1,"
nums2
n}
"objects,"
occurrences
odd
odd.
of
omit
omitted.
omitting
on
on.
once
one
one.
only
operator
or
order
"order,"
order.
ordered
original
"original,"
other
"other,"
other.
others.
otherwise
otherwise.
our
out
outer
outer.
outside
outsideMode
over
over.
overlap
"overlap,"
overlap.
overlapping
overlapping).
overlapping.
pair
pair.
pairs
"pairs,"
parameter
parameters
parenthesis
"parenthesis,"
parrot
parrot.
part
part).
particular
party
"party,"
pass
passing
pattern
"pattern,"
pattern:
patterns
period
"pi,"
pieces
place
plus
pluses
position
positions
positive
positive.
possible
possibly
"power,"
"powerN(3,"
practice
preceeded
prefix
"present),"
"present,"
present.
preserved
previous
"printing,"
priority.)
problem
"problem,"
problem.
problem.)
problems
process
produce
product
progress
putting
question
range
range.
rearranged
recur
recursion
recursive
recursively
red
reduced
remainder
"remainder,"
"remainders,"
remaining
remove
"remove,"
removed
"removed,"
removed.
removes
removing
repeating
"repetition,"
repetitions
replaced
replacing
representing
rest
result
result.
resulting
results
return
returning
returns
reverse
righmost
right
right.
rightmost
"rolls,"
round
round10(int
roundSum().
rounded
rounds
row
row.
rows.
rule.
run
running
same
"same,"
same.
same.)
"sameEnds(""abXab"")"
sandwich
say
score
scores
"scores,"
scores.
scoresAverage()
scoresAverage().
scoresSpecial()
search
second
section
sections
see
"seen,"
"sensitive"")."
sensitive).
"sep,"
separate
separated
separator
sequence
sequence.
series
set
shift
"shifted"""
"short+long+short,"
shorter
should
show
showing
shown
side
side.
simply
since
single
size
sleep
slightly
small
"small,"
smaller
smallest
smiling
smiling.
so
solution
solved
some
something
sometimes
somewhere
"somewhere,"
somewhere.
sorted
sorting.
space
"spaced,"
spaces
span
special
special.
specify
split
splitArray().
splitOdd10().
squared
squared).
squirrel
squirrels
star
"star,"
start
"start,"
start.
start..end.
start/end
start=1
"start=2,"
start=5
starting
starts
step
steps
store
"str,"
str.contains(x)
str.length()
str.length()).
"str.substring(i,"
str.toLowerCase()
str.toUpperCase()
str1
str1.compareTo(str2)
str2
strategy
strict
string
string's
"string,"
string.
string.)
string?
strings
"strings,"
strings.
student's
sub
"sub,"
subsequent
substring
substring).
substring.
substrings
successful
"successful,"
such
sum
"sum,"
sum.
sumHeights
sums
"sums,"
surround
swap
"swap,"
"swapped,"
swaps
syntax
tag
tags
take
takes
taking
talking
target
"target,"
target?
teen
"teen,"
teen.
teens.
"temperatures,"
test
tests
text
text.
than
that
"that,"
the
their
them
them.
then
there
there.
these
they
third.
this
this:
those
three
through
ticket
"ticket,"
"tie,"
tie.
time
time.
times
"times,"
times.
to
toLowerCase()
together
together.
too
topmost
topping
total
towards
trail.
triangle
triple
triples
triples.
trouble
trouble.
true
"true,"
truly
twice
"twice,"
twice.
two
type.
types.
unchanged.
under
understand
unless
unlucky
"unlucky,"
unlucky.
until
up
upper
upper/lower
uppercase
use
used
users
"users,"
uses
usual
v2)
vacation
vacation.
valid
valid.
value
"value,"
value.
values
values).
"values,"
values.
variation
vary
version
"version,"
very
walk
walking
was
way
"way,"
we
we'll
we're
web
weekday
"weekday,"
"weekend,"
what's
whatever
when
where
which
whichever
while
whole
will
with
within
without
won't
word
"word,"
word-count
words
"words,"
words.
wordsWithout()
works.
would
wrapping
write
x.
xy-balanced
xy-balanced.
xyz
y
yield
yields
"yields""kikittenki""."
you
your
z
zero
"zero,"
zero.
zeros
{
"{"""
"{""a"","
"{""that"
{0
"{0,"
"{1,"
"{2,"
"{3,"
"{5,"
"{6,"
"{7,"
<BOS>
<EOS>
""""
"""!""."
""""""
"""""."
"""((()))""."
"""(())"""
"""(abc)""."
"""*"""
"""*""."
"""0"","
"""1"""
"""11"""
"""2"""
"""3.14""."
"""6!""."
"""6"""
"""9ix"""
"""<<>>"","
"""<<word>>""."
"""<i>Yay</i>"""
"""<i>Yay</i>""."
"""?"""
"""AxA"""
"""AxAxA"""
"""Bob"","
"""Buzz"","
"""Buzz""."
"""Bye"""
"""CCoCodCode""."
"""Candy"""
"""Code"""
"""Fizz"""
"""Fizz""."
"""FizzBuzz""."
"""He""."
"""Hello"
"""Hello"""
"""HelloHe"""
"""Hi"""
"""HiByeByeHi""."
"""Hlo""."
"""Woo""."
"""WooHoo"""
"""X"""
"""X"","
"""Yay""."
"""a"""
"""a"","
"""aa"","
"""ab""."
"""ab**cd"""
"""ab*cd"""
"""abXYZba"""
"""aba"""
"""abc"""
"""abcat""."
"""abcdef"""
"""ad"""
"""ad""."
"""alone"""
"""and""."
"""answers"""
"""az"""
"""b"""
"""b"","
"""b""}."
"""bOk"""
"""bad"""
"""badxxx"""
"""bca""."
"""bcaefd""."
"""big"""
"""block"""
"""blue"""
"""bob"""
"""bread"""
"""butter""."
"""c"""
"""c"","
"""case"
"""cat"""
"""centered"""
"""cherry""."
"""cleaned"""
"""close"""
"""clump"""
"""code"""
"""codign""."
"""coding"""
"""concatenation"")"
"""cooe"""
"""cope"""
"""count"""
"""decomposition"")."
"""del"""
"""dog"""
"""edited""."
"""ell""."
"""endy"""
"""equalOk"""
"""everywhere"""
"""f"""
"""far"","
"""fez"""
"""fries""."
"""happy"""
"""heavy"""
"""hello"""
"""hello"":0."
"""hi"""
"""hip""."
"""hippo"""
"""hixxxhi"""
"""hour"""
"""i"""
"""ice"
"""is"
"""is"""
"""java"""
"""key"""
"""kien""."
"""kitten"""
"""kittens"""
"""left"
"""linear"""
"""lloHe""."
"""loHi""."
"""ly""."
"""match"""
"""mirror"""
"""mix"","
"""mod"""
"""negative"""
"""not"
"""not"""
"""not"","
"""num"","
"""nuts""."
"""out"""
"""oz""."
"""ozymandias"""
"""pair"""
"""pi"""
"""pix"","
"""potato"""
"""public"
"""red"""
"""ri""."
"""rotated"
"""salad"""
"""span"""
"""special"""
"""spinach"""
"""spinach""."
"""string"""
"""tcatt""."
"""teen"""
"""this"""
"""triple"""
"""unlucky"""
"""word"""
"""x"""
"""x""."
"""x.xyz"""
"""xbadxx"""
"""xip"""
"""xx"""
"""xx"","
"""xx""."
"""xxbaaz"""
"""xxbadxx""."
"""xxcaazz"""
"""xxx"""
"""xxy"""
"""xxyz"""
"""xyx"""
"""xyz"""
"""xyz(abc)123"""
"""y"""
"""ya""."
"""yak"""
"""yellow"""
"""yo"""
"""yogurt"""
"""yy"""
"""yyzzza"""
"""yza""."
"""z""."
"""zap"""
"""zip"""
"""zipXzap"""
"""zpXzp""."
%
%)
'*'
"'0',"
"'1',"
'9'.
'@'
'a'
'b'.
"'d',"
'e'
'g'
'm'
'o'
'p'.
'x'
"'x',"
'x's.
'y'
'z'
"'z',"
"(""+""),"
(%)
(*)
(.).
(/)
(126
(3
(7
(A
(Efficiency
(No
(Note:
(On
(See
(This
(a
(and
(at
(backwards)
(but
(case
(differing
(e.g.
(essentially
(every
(i.e.
(if
(in
(inclusive).
(known
(length
(n-1)
(n-2)
(no
(not
(one
(possibly
(spaces
(star)
(the
(we
(without
*
+
+0
+4
",0,"
--
-1
-1/0/1).
..
...
....
.equals()
/
0
0's.
0).
"0,"
"0,1,"
0-9
0.
0..10
0..23.
0..nums.length
0..str.length()-1
0}.
1
1's
"1),"
1)/2.
1*2
"1,"
1.
"1..10,"
1..100.
1..6.
1..length.
1..str.length().
10
10's
10)
"10,"
10.
10..19
10..20
"10..99,"
100
100.
11
"11,"
11.
12
12).
128
13
"13,"
13..19
15
16
17
19
19.
1st
1}
1}.
2
"2"""
2's
2)
"2,"
2.
"20,"
20.
200.
20}.
21
"21,"
21.
23
"23,"
23.
"24,"
25.
27
271
2nd
"2nd,"
2}
"2},"
3
3's
"3's,"
3's.
"3,"
3.
30..40
38
39
3}
4
4's
"4's,"
4's.
"4,"
"4,5,"
4.
40
40..50
"45,"
"4th,"
4}.
5
5's
"5's,"
5)
"5,"
5.
57.
5}
5}.
6
6's
"6),"
"6,"
6-sided
6.
"60,"
"6th,"
"6},"
6}.
7
7's
7).
"7,"
7.
717
7}.
8
"8,"
"8,9"
8.
8818
9
9's
"9,"
9.
90.
90..100
"99,"
9}.
:
</i>
<=
<i>
=
>=
A
A's
"AP,"
Additionally
Also
"Alternately,"
Any
ArrayList)
Assume
B
"B,"
B.
Basically
"Bob!""."
Boolean>
Both
Call
Character.isDigit(char)
Character.isLetter(char)
Code
Code)
Code.)
Compute
Consider
Count
Decompose
Define
Do
Does
Each
Every
Except
FizzBuzz
For
Given
HTML
Harder
However
"However,"
If
Ignore
In
Integer.parseInt(string)
Integer>
Introduction
"Java,"
JavaBat
List
Look
Loop
"Map<String,"
Math.abs(n)
Math.abs(num)
"Math.max(v1,"
"Math.min(v1,"
Mod
Mod)
Modify
More
N
"N,"
No
Normally
Note
Note:
Nth
On
Once
One
Or
Order
Other
Otherwise
"Otherwise,"
Pair's
Rather
Recursively
Remove
Repeat
Return
Returns
Say
See
So
"So,"
Start
String
String.valueOf(n)
String.valueOf(xxx)
String>
String[]
String[desired_length]
Strings
Suggestion:
Suppose
The
This
To
Unless
Use
User
Using
We
We'll
What
When
Write
Yay
You
a
"a,"
a.
aSmile
ab
"ab,"
"abba,"
absolute
ac
ac.
accept
actually
add
added
additional
adjacent
advantage
after
algorithm:
all
allocate
"allowed,"
alone
along
alphabetic
alphabetical
already
also
also.
also:
altitude
always
an
and
another
another?
"answer,"
answer.
answers
"answers,"
any
anything
"anything,"
anything.
anywhere
anywhere.
appear
appearance
appearances
appearing
appears
append
appended
approach
are
area.
arguments
around
array
"array,"
array.
arrays
"arrays,"
arrays.
as
assume
at
available
average
average(int[]
average.
averages
avoid
b
b)
"b,"
b.
bSmile
"back,"
back.
backtracking
balance
"balanced,"
base
bc
"bc,"
be
because
becomes
been
before
before.
begining
beginning
"beginning,"
begins
below
best
between
between.
big
bigger
bit
blank
blank.
block
"block,"
blocks
"blocks,"
blocks.
blue
boolean)
both
"both),"
both.
bound
bread
bread.
build
built
built-in
"bully,"
but
by
c
"c,"
call
caller
calls
can
case
"case,"
case.
case;
cases
cases).
"cases,"
cause
caused
change
changed
changes
char
"char,"
char.
character
characters
characters.
chars
"chars,"
chars.
check
choices.
choose
chosen
"chosen,"
chosen.
cigars
cigars.
classic
clumps
code
color
come
comes
compare
complicated
computation
compute
computes
concatenated
concatenation
"concatenation,"
conditions
consider
considering
constraint
constraint:
constraints:
contain
containing
"containing,"
contains
"contains,"
"contents,"
contiguous
continuing
convention
convert
converted
converts
copies
copy
"copy,"
copying
correct
corresponding
count
"count,"
count.
counting
counts
"cream"""
create
creates
current
data
"decomposition,"
"default,"
define
definition.
deleted.
dice
die
differ
difference
differences
different
differing
differs
difficult
digit
"digit,"
digit.
digit.)
digits
digits.
directly
directly.
disabled.
discard
divide
divided
divides
dividing
divisible
division
"division,"
do
does
doing
double
"double,"
"double-char,"
double.
"doubles,"
down
down.
draws
duplicates.
e.g.
each
each.
earlier
either
element
"element,"
element.
elements
elements.
else
empty
encountering
end
end)
"end,"
end.
end=10
end=4
end=5
ending
ends
endy
endy.
entirely
equal
equal.
equality
etc.
even
evenly
"evenly,"
evenly.
event
every
everywhere
exact
exact.
exactly
exactly.
"exam,"
example
"example,"
except
exception
exchanged.
execute
exist
"exist,"
exists
expected
extending
extent
extra
extract
fact
factorial
false
"false,"
false.
famous
fewer
fibonacci
fibonacci(n)
figure
final
find
finds
first
"first,"
"fit,"
fix34
fixTeen(int
fixed
followed
following
follows:
food
for
for-loop
"forbidden,"
form
found
from
front
"front,"
front.
front;
function
g's
get
given
gives
giving
go
goal
going
"gone,"
gone.
great
greater
green
greeting
group
"group,"
group.
grouped
grouping).
groups
groups).
"groups,"
half
"half,"
half.
happens
happy.
harder
has
have
height
heights
"heights,"
helper
here
hour
how
however
i
id
id.
identical
if
if-statement
ignore
ignoring
image
immedately
immediately
implement
in
in.
include
included
including
inclusive
inclusive).
"inclusive,"
inclusive.
incorrect
increases
increasing
increment
indent
index
index).
index+1
"index,"
index.
indexes
indicate
initial
inner
"inner,"
inside
inside.
instance
instances
"instances,"
instead
int
int.)
int[desired_length]
integer
integers
"integers,"
interviews.
into
ints
"ints,"
is
"is,"
is:
isEndy(int
it
"it,"
it.
italic
its
itself
"itself,"
itself.
j)
j.
java
job
just
keep
key
keys
keys.
known
large.
larger
"larger,"
larger.
largest
largest.
last
"last,"
later
"later,"
least
leave
leaves
leaving
left
"left"""
leftmost
leftover
length
"length,"
length-0
"length-3,"
length.
length/2.
"lengths,"
less
"less,"
letter
letter.)
level
like
"like,"
likewise
limited
list
little
logic
long
longer
longest
look
looking
looks.
loop
loops
loops)
loops).
lottery
loud
lower
lowercase
lucky.
made
main
make
makes
making
many
map
"map,"
map.
match
"match,"
matches
"mathematics,"
matter.
may
mean
medium
method
method).
methods
middle
"middle,"
minus
mirror
missing
mod
modified
modify
"monkeys,"
more
"more,"
more.
most
move
move.
moved
moving
much
multiple
multiples
multiplication)
multiplied
must
n
n%10
n)
n*(n
n*n
"n,"
n-1
n-1.
n.
"n/10,"
n=0
n=1
"n=2,"
n=3
n=3.
"n>=0,"
name
"name,"
names
"names,"
naturally
nearest
need
needed
"needed,"
needed.)
negative
negative.
negative/0/positive
neither
nesting
new
next
no
noDoubles
noTeenSum().
non-empty
non-empty.
non-negative
non-negative.
non-overlapping
non-zero
none
not
"not""."
"not,"
not.
now
nth
num
num)
number
"number,"
number.
numbers
"numbers,"
numbers.
nums1
"nums1,"
nums2
n}
"objects,"
occurrences
odd
odd.
of
omit
omitted.
omitting
on
on.
once
one
one.
only
operator
or
order
"order,"
order.
ordered
original
"original,"
other
"other,"
other.
others.
otherwise
otherwise.
our
out
outer
outer.
outside
outsideMode
over
over.
overlap
"overlap,"
overlap.
overlapping
overlapping).
overlapping.
pair
pair.
pairs
"pairs,"
parameter
parameters
parenthesis
"parenthesis,"
parrot
parrot.
part
part).
particular
party
"party,"
pass
passing
pattern
"pattern,"
pattern:
patterns
period
"pi,"
pieces
place
plus
pluses
position
positions
positive
positive.
possible
possibly
"power,"
"powerN(3,"
practice
preceeded
prefix
"present),"
"present,"
present.
preserved
previous
"printing,"
priority.)
problem
"problem,"
problem.
problem.)
problems
process
produce
product
progress
putting
question
range
range.
rearranged
recur
recursion
recursive
recursively
red
reduced
remainder
"remainder,"
"remainders,"
remaining
remove
"remove,"
removed
"removed,"
removed.
removes
removing
repeating
"repetition,"
repetitions
replaced
replacing
representing
rest
result
result.
resulting
results
return
returning
returns
reverse
righmost
right
right.
rightmost
"rolls,"
round
round10(int
roundSum().
rounded
rounds
row
row.
rows.
rule.
run
running
same
"same,"
same.
same.)
"sameEnds(""abXab"")"
sandwich
say
score
scores
"scores,"
scores.
scoresAverage()
scoresAverage().
scoresSpecial()
search
second
section
sections
see
"seen,"
"sensitive"")."
sensitive).
"sep,"
separate
separated
separator
sequence
sequence.
series
set
shift
"shifted"""
"short+long+short,"
shorter
should
show
showing
shown
side
side.
simply
since
single
size
sleep
slightly
small
"small,"
smaller
smallest
smiling
smiling.
so
solution
solved
some
something
sometimes
somewhere
"somewhere,"
somewhere.
sorted
sorting.
space
"spaced,"
spaces
span
special
special.
specify
split
splitArray().
splitOdd10().
squared
squared).
squirrel
squirrels
star
"star,"
start
"start,"
start.
start..end.
start/end
start=1
"start=2,"
start=5
starting
starts
step
steps
store
"str,"
str.contains(x)
str.length()
str.length()).
"str.substring(i,"
str.toLowerCase()
str.toUpperCase()
str1
str1.compareTo(str2)
str2
strategy
strict
string
string's
"string,"
string.
string.)
string?
strings
"strings,"
strings.
student's
sub
"sub,"
subsequent
substring
substring).
substring.
substrings
successful
"successful,"
such
sum
"sum,"
sum.
sumHeights
sums
"sums,"
surround
swap
"swap,"
"swapped,"
swaps
syntax
tag
tags
take
takes
taking
talking
target
"target,"
target?
teen
"teen,"
teen.
teens.
"temperatures,"
test
tests
text
text.
than
that
"that,"
the
their
them
them.
then
there
there.
these
they
third.
this
this:
those
three
through
ticket
"ticket,"
"tie,"
tie.
time
time.
times
"times,"
times.
to
toLowerCase()
together
together.
too
topmost
topping
total
towards
trail.
triangle
triple
triples
triples.
trouble
trouble.
true
"true,"
truly
twice
"twice,"
twice.
two
type.
types.
unchanged.
under
understand
unless
unlucky
"unlucky,"
unlucky.
until
up
upper
upper/lower
uppercase
use
used
users
"users,"
uses
usual
v2)
vacation
vacation.
valid
valid.
value
"value,"
value.
values
values).
"values,"
values.
variation
vary
version
"version,"
very
walk
walking
was
way
"way,"
we
we'll
we're
web
weekday
"weekday,"
"weekend,"
what's
whatever
when
where
which
whichever
while
whole
will
with
within
without
won't
word
"word,"
word-count
words
"words,"
words.
wordsWithout()
works.
would
wrapping
write
x.
xy-balanced
xy-balanced.
xyz
y
yield
yields
"yields""kikittenki""."
you
your
z
zero
"zero,"
zero.
zeros
{
"{"""
"{""a"","
"{""that"
{0
"{0,"
"{1,"
"{2,"
"{3,"
"{5,"
"{6,"
"{7,"
<BOS>
<EOS>
""""
"""!""."
""""""
"""""."
"""((()))""."
"""(())"""
"""(abc)""."
"""*"""
"""*""."
"""0"","
"""1"""
"""11"""
"""2"""
"""3.14""."
"""6!""."
"""6"""
"""9ix"""
"""<<>>"","
"""<<word>>""."
"""<i>Yay</i>"""
"""<i>Yay</i>""."
"""?"""
"""AxA"""
"""AxAxA"""
"""Bob"","
"""Buzz"","
"""Buzz""."
"""Bye"""
"""CCoCodCode""."
"""Candy"""
"""Code"""
"""Fizz"""
"""Fizz""."
"""FizzBuzz""."
"""He""."
"""Hello"
"""Hello"""
"""HelloHe"""
"""Hi"""
"""HiByeByeHi""."
"""Hlo""."
"""Woo""."
"""WooHoo"""
"""X"""
"""X"","
"""Yay""."
"""a"""
"""a"","
"""aa"","
"""ab""."
"""ab**cd"""
"""ab*cd"""
"""abXYZba"""
"""aba"""
"""abc"""
"""abcat""."
"""abcdef"""
"""ad"""
"""ad""."
"""alone"""
"""and""."
"""answers"""
"""az"""
"""b"""
"""b"","
"""b""}."
"""bOk"""
"""bad"""
"""badxxx"""
"""bca""."
"""bcaefd""."
"""big"""
"""block"""
"""blue"""
"""bob"""
"""bread"""
"""butter""."
"""c"""
"""c"","
"""case"
"""cat"""
"""centered"""
"""cherry""."
"""cleaned"""
"""close"""
"""clump"""
"""code"""
"""codign""."
"""coding"""
"""concatenation"")"
"""cooe"""
"""cope"""
"""count"""
"""decomposition"")."
"""del"""
"""dog"""
"""edited""."
"""ell""."
"""endy"""
"""equalOk"""
"""everywhere"""
"""f"""
"""far"","
"""fez"""
"""fries""."
"""happy"""
"""heavy"""
"""hello"""
"""hello"":0."
"""hi"""
"""hip""."
"""hippo"""
"""hixxxhi"""
"""hour"""
"""i"""
"""ice"
"""is"
"""is"""
"""java"""
"""key"""
"""kien""."
"""kitten"""
"""kittens"""
"""left"
"""linear"""
"""lloHe""."
"""loHi""."
"""ly""."
"""match"""
"""mirror"""
"""mix"","
"""mod"""
"""negative"""
"""not"
"""not"""
"""not"","
"""num"","
"""nuts""."
"""out"""
"""oz""."
"""ozymandias"""
"""pair"""
"""pi"""
"""pix"","
"""potato"""
"""public"
"""red"""
"""ri""."
"""rotated"
"""salad"""
"""span"""
"""special"""
"""spinach"""
"""spinach""."
"""string"""
"""tcatt""."
"""teen"""
"""this"""
"""triple"""
"""unlucky"""
"""word"""
"""x"""
"""x""."
"""x.xyz"""
"""xbadxx"""
"""xip"""
"""xx"""
"""xx"","
"""xx""."
"""xxbaaz"""
"""xxbadxx""."
"""xxcaazz"""
"""xxx"""
"""xxy"""
"""xxyz"""
"""xyx"""
"""xyz"""
"""xyz(abc)123"""
"""y"""
"""ya""."
"""yak"""
"""yellow"""
"""yo"""
"""yogurt"""
"""yy"""
"""yyzzza"""
"""yza""."
"""z""."
"""zap"""
"""zip"""
"""zipXzap"""
"""zpXzp""."
%
%)
'*'
"'0',"
"'1',"
'9'.
'@'
'a'
'b'.
"'d',"
'e'
'g'
'm'
'o'
'p'.
'x'
"'x',"
'x's.
'y'
'z'
"'z',"
"(""+""),"
(%)
(*)
(.).
(/)
(126
(3
(7
(A
(Efficiency
(No
(Note:
(On
(See
(This
(a
(and
(at
(backwards)
(but
(case
(differing
(e.g.
(essentially
(every
(i.e.
(if
(in
(inclusive).
(known
(length
(n-1)
(n-2)
(no
(not
(one
(possibly
(spaces
(star)
(the
(we
(without
*
+
+0
+4
",0,"
--
-1
-1/0/1).
..
...
....
.equals()
/
0
0's.
0).
"0,"
"0,1,"
0-9
0.
0..10
0..23.
0..nums.length
0..str.length()-1
0}.
1
1's
"1),"
1)/2.
1*2
"1,"
1.
"1..10,"
1..100.
1..6.
1..length.
1..str.length().
10
10's
10)
"10,"
10.
10..19
10..20
"10..99,"
100
100.
11
"11,"
11.
12
12).
128
13
"13,"
13..19
15
16
17
19
19.
1st
1}
1}.
2
"2"""
2's
2)
"2,"
2.
"20,"
20.
200.
20}.
21
"21,"
21.
23
"23,"
23.
"24,"
25.
27
271
2nd
"2nd,"
2}
"2},"
3
3's
"3's,"
3's.
"3,"
3.
30..40
38
39
3}
4
4's
"4's,"
4's.
"4,"
"4,5,"
4.
40
40..50
"45,"
"4th,"
4}.
5
5's
"5's,"
5)
"5,"
5.
57.
5}
5}.
6
6's
"6),"
"6,"
6-sided
6.
"60,"
"6th,"
"6},"
6}.
7
7's
7).
"7,"
7.
717
7}.
8
"8,"
"8,9"
8.
8818
9
9's
"9,"
9.
90.
90..100
"99,"
9}.
:
</i>
<=
<i>
=
>=
A
A's
"AP,"
Additionally
Also
"Alternately,"
Any
ArrayList)
Assume
B
"B,"
B.
Basically
"Bob!""."
Boolean>
Both
Call
Character.isDigit(char)
Character.isLetter(char)
Code
Code)
Code.)
Compute
Consider
Count
Decompose
Define
Do
Does
Each
Every
Except
FizzBuzz
For
Given
HTML
Harder
However
"However,"
If
Ignore
In
Integer.parseInt(string)
Integer>
Introduction
"Java,"
JavaBat
List
Look
Loop
"Map<String,"
Math.abs(n)
Math.abs(num)
"Math.max(v1,"
"Math.min(v1,"
Mod
Mod)
Modify
More
N
"N,"
No
Normally
Note
Note:
Nth
On
Once
One
Or
Order
Other
Otherwise
"Otherwise,"
Pair's
Rather
Recursively
Remove
Repeat
Return
Returns
Say
See
So
"So,"
Start
String
String.valueOf(n)
String.valueOf(xxx)
String>
String[]
String[desired_length]
Strings
Suggestion:
Suppose
The
This
To
Unless
Use
User
Using
We
We'll
What
When
Write
Yay
You
a
"a,"
a.
aSmile
ab
"ab,"
"abba,"
absolute
ac
ac.
accept
actually
add
added
additional
adjacent
advantage
after
algorithm:
all
allocate
"allowed,"
alone
along
alphabetic
alphabetical
already
also
also.
also:
altitude
always
an
and
another
another?
"answer,"
answer.
answers
"answers,"
any
anything
"anything,"
anything.
anywhere
anywhere.
appear
appearance
appearances
appearing
appears
append
appended
approach
are
area.
arguments
around
array
"array,"
array.
arrays
"arrays,"
arrays.
as
assume
at
available
average
average(int[]
average.
averages
avoid
b
b)
"b,"
b.
bSmile
"back,"
back.
backtracking
balance
"balanced,"
base
bc
"bc,"
be
because
becomes
been
before
before.
begining
beginning
"beginning,"
begins
below
best
between
between.
big
bigger
bit
blank
blank.
block
"block,"
blocks
"blocks,"
blocks.
blue
boolean)
both
"both),"
both.
bound
bread
bread.
build
built
built-in
"bully,"
but
by
c
"c,"
call
caller
calls
can
case
"case,"
case.
case;
cases
cases).
"cases,"
cause
caused
change
changed
changes
char
"char,"
char.
character
characters
characters.
chars
"chars,"
chars.
check
choices.
choose
chosen
"chosen,"
chosen.
cigars
cigars.
classic
clumps
code
color
come
comes
compare
complicated
computation
compute
computes
concatenated
concatenation
"concatenation,"
conditions
consider
considering
constraint
constraint:
constraints:
contain
containing
"containing,"
contains
"contains,"
"contents,"
contiguous
continuing
convention
convert
converted
converts
copies
copy
"copy,"
copying
correct
corresponding
count
"count,"
count.
counting
counts
"cream"""
create
creates
current
data
"decomposition,"
"default,"
define
definition.
deleted.
dice
die
differ
difference
differences
different
differing
differs
difficult
digit
"digit,"
digit.
digit.)
digits
digits.
directly
directly.
disabled.
discard
divide
divided
divides
dividing
divisible
division
"division,"
do
does
doing
double
"double,"
"double-char,"
double.
"doubles,"
down
down.
draws
duplicates.
e.g.
each
each.
earlier
either
element
"element,"
element.
elements
elements.
else
empty
encountering
end
end)
"end,"
end.
end=10
end=4
end=5
ending
ends
endy
endy.
entirely
equal
equal.
equality
etc.
even
evenly
"evenly,"
evenly.
event
every
everywhere
exact
exact.
exactly
exactly.
"exam,"
example
"example,"
except
exception
exchanged.
execute
exist
"exist,"
exists
expected
extending
extent
extra
extract
fact
factorial
false
"false,"
false.
famous
fewer
fibonacci
fibonacci(n)
figure
final
find
finds
first
"first,"
"fit,"
fix34
fixTeen(int
fixed
followed
following
follows:
food
for
for-loop
"forbidden,"
form
found
from
front
"front,"
front.
front;
function
g's
get
given
gives
giving
go
goal
going
"gone,"
gone.
great
greater
green
greeting
group
"group,"
group.
grouped
grouping).
groups
groups).
"groups,"
half
"half,"
half.
happens
happy.
harder
has
have
height
heights
"heights,"
helper
here
hour
how
however
i
id
id.
identical
if
if-statement
ignore
ignoring
image
immedately
immediately
implement
in
in.
include
included
including
inclusive
inclusive).
"inclusive,"
inclusive.
incorrect
increases
increasing
increment
indent
index
index).
index+1
"index,"
index.
indexes
indicate
initial
inner
"inner,"
inside
inside.
instance
instances
"instances,"
instead
int
int.)
int[desired_length]
integer
integers
"integers,"
interviews.
into
ints
"ints,"
is
"is,"
is:
isEndy(int
it
"it,"
it.
italic
its
itself
"itself,"
itself.
j)
j.
java
job
just
keep
key
keys
keys.
known
large.
larger
"larger,"
larger.
largest
largest.
last
"last,"
later
"later,"
least
leave
leaves
leaving
left
"left"""
leftmost
leftover
length
"length,"
length-0
"length-3,"
length.
length/2.
"lengths,"
less
"less,"
letter
letter.)
level
like
"like,"
likewise
limited
list
little
logic
long
longer
longest
look
looking
looks.
loop
loops
loops)
loops).
lottery
loud
lower
lowercase
lucky.
made
main
make
makes
making
many
map
"map,"
map.
match
"match,"
matches
"mathematics,"
matter.
may
mean
medium
method
method).
methods
middle
"middle,"
minus
mirror
missing
mod
modified
modify
"monkeys,"
more
"more,"
more.
most
move
move.
moved
moving
much
multiple
multiples
multiplication)
multiplied
must
n
n%10
n)
n*(n
n*n
"n,"
n-1
n-1.
n.
"n/10,"
n=0
n=1
"n=2,"
n=3
n=3.
"n>=0,"
name
"name,"
names
"names,"
naturally
nearest
need
needed
"needed,"
needed.)
negative
negative.
negative/0/positive
neither
nesting
new
next
no
noDoubles
noTeenSum().
non-empty
non-empty.
non-negative
non-negative.
non-overlapping
non-zero
none
not
"not""."
"not,"
not.
now
nth
num
num)
number
"number,"
number.
numbers
"numbers,"
numbers.
nums1
"nums1,"
nums2
n}
"objects,"
occurrences
odd
odd.
of
omit
omitted.
omitting
on
on.
once
one
one.
only
operator
or
order
"order,"
order.
ordered
original
"original,"
other
"other,"
other.
others.
otherwise
otherwise.
our
out
outer
outer.
outside
outsideMode
over
over.
overlap
"overlap,"
overlap.
overlapping
overlapping).
overlapping.
pair
pair.
pairs
"pairs,"
parameter
parameters
parenthesis
"parenthesis,"
parrot
parrot.
part
part).
particular
party
"party,"
pass
passing
pattern
"pattern,"
pattern:
patterns
period
"pi,"
pieces
place
plus
pluses
position
positions
positive
positive.
possible
possibly
"power,"
"powerN(3,"
practice
preceeded
prefix
"present),"
"present,"
present.
preserved
previous
"printing,"
priority.)
problem
"problem,"
problem.
problem.)
problems
process
produce
product
progress
putting
question
range
range.
rearranged
recur
recursion
recursive
recursively
red
reduced
remainder
"remainder,"
"remainders,"
remaining
remove
"remove,"
removed
"removed,"
removed.
removes
removing
repeating
"repetition,"
repetitions
replaced
replacing
representing
rest
result
result.
resulting
results
return
returning
returns
reverse
righmost
right
right.
rightmost
"rolls,"
round
round10(int
roundSum().
rounded
rounds
row
row.
rows.
rule.
run
running
same
"same,"
same.
same.)
"sameEnds(""abXab"")"
sandwich
say
score
scores
"scores,"
scores.
scoresAverage()
scoresAverage().
scoresSpecial()
search
second
section
sections
see
"seen,"
"sensitive"")."
sensitive).
"sep,"
separate
separated
separator
sequence
sequence.
series
set
shift
"shifted"""
"short+long+short,"
shorter
should
show
showing
shown
side
side.
simply
since
single
size
sleep
slightly
small
"small,"
smaller
smallest
smiling
smiling.
so
solution
solved
some
something
sometimes
somewhere
"somewhere,"
somewhere.
sorted
sorting.
space
"spaced,"
spaces
span
special
special.
specify
split
splitArray().
splitOdd10().
squared
squared).
squirrel
squirrels
star
"star,"
start
"start,"
start.
start..end.
start/end
start=1
"start=2,"
start=5
starting
starts
step
steps
store
"str,"
str.contains(x)
str.length()
str.length()).
"str.substring(i,"
str.toLowerCase()
str.toUpperCase()
str1
str1.compareTo(str2)
str2
strategy
strict
string
string's
"string,"
string.
string.)
string?
strings
"strings,"
strings.
student's
sub
"sub,"
subsequent
substring
substring).
substring.
substrings
successful
"successful,"
such
sum
"sum,"
sum.
sumHeights
sums
"sums,"
surround
swap
"swap,"
"swapped,"
swaps
syntax
tag
tags
take
takes
taking
talking
target
"target,"
target?
teen
"teen,"
teen.
teens.
"temperatures,"
test
tests
text
text.
than
that
"that,"
the
their
them
them.
then
there
there.
these
they
third.
this
this:
those
three
through
ticket
"ticket,"
"tie,"
tie.
time
time.
times
"times,"
times.
to
toLowerCase()
together
together.
too
topmost
topping
total
towards
trail.
triangle
triple
triples
triples.
trouble
trouble.
true
"true,"
truly
twice
"twice,"
twice.
two
type.
types.
unchanged.
under
understand
unless
unlucky
"unlucky,"
unlucky.
until
up
upper
upper/lower
uppercase
use
used
users
"users,"
uses
usual
v2)
vacation
vacation.
valid
valid.
value
"value,"
value.
values
values).
"values,"
values.
variation
vary
version
"version,"
very
walk
walking
was
way
"way,"
we
we'll
we're
web
weekday
"weekday,"
"weekend,"
what's
whatever
when
where
which
whichever
while
whole
will
with
within
without
won't
word
"word,"
word-count
words
"words,"
words.
wordsWithout()
works.
would
wrapping
write
x.
xy-balanced
xy-balanced.
xyz
y
yield
yields
"yields""kikittenki""."
you
your
z
zero
"zero,"
zero.
zeros
{
"{"""
"{""a"","
"{""that"
{0
"{0,"
"{1,"
"{2,"
"{3,"
"{5,"
"{6,"
"{7,"
<BOS>
<EOS>
