Speech,Loop
,1
,1
,1
,1
,1
,1
,1
"Given an array of strings, return a Map<String, Integer> containing a key for every different string in the array, always with the value 0. For example the string ""hello"" makes the pair ""hello"":0. We'll do more complicated counting later, but for this problem the value is simply 0.",1
"Given an array of strings, return a Map<String, Integer> containing a key for every different string in the array, and the value is that string's length.",1
"Given an array of non-empty strings, create and return a Map<String, String> as follows: for each string add its first character as a key with its last character as the value.",1
"The classic word-count algorithm: given an array of strings, return a Map<String, Integer> with a key for each different string, with the value the number of times that string appears in the array.",1
"Given an array of non-empty strings, return a Map<String, String> with a key for every different first character seen, with the value of all the strings starting with that character appended together in the order they appear in the array.",1
"Loop over the given array of strings to build a result string like this: when a string appears the 2nd, 4th, 6th, etc. time in the array, append the string to the result. Return the empty string if no string appears a 2nd time.",1
"Given an array of strings, return a Map<String, Boolean> where each different string is a key and its value is true if that string appears 2 or more times in the array.",1
"We'll say that 2 strings ""match"" if they are non-empty and their first chars are the same. Loop over and then return the given array of non-empty strings as follows: if a string matches an earlier string in the array, swap the 2 strings in the array. When a position in the array has been swapped, it no longer matches anything. Using a map, this can be solved making just one pass over the array. More difficult than it looks.",1
"We'll say that 2 strings ""match"" if they are non-empty and their first chars are the same. Loop over and then return the given array of non-empty strings as follows: if a string matches an earlier string in the array, swap the 2 strings in the array. A particular first char can only cause 1 swap, so once a char has caused a swap, its later swaps are disabled. Using a map, this can be solved making just one pass over the array. More difficult than it looks.",1
